from os import PathLike
from pathlib import Path
from typing import List

class Library:
    def __init__(
            self,
            name: str,
            paths: List[Path],
            includes: List[Path],
            defines: List[str],
            uses: List[str],
            special_uses: List[str],
            infos: List[str],
            warnings: List[str],
    ):
        self.name = name
        self.paths = paths
        self.include_paths = includes
        self.defines = defines
        self.uses = uses
        self.special_uses = special_uses
        self.infos = infos
        self.warnings = warnings

    def get_lines(self) -> List[str]:
        lines = [
            '# libman library file generated by Conan. DO NOT EDIT!',
            'Type: Library',
            f'Name: {self.name}',
        ]
        for inc in self.include_paths:
            lines.append(f'Include-Path: {inc}')
        for def_ in self.defines:
            lines.append(f'Preprocessor-Define: {def_}')
        for path in self.paths:
            lines.append(f'Path: {path}')
        for special in self.special_uses:
            lines.append(f'Special-Uses: {special}')
        for uses in self.uses:
            lines.append(f'Uses: {uses}')
        return lines

    def write(self, fpath: PathLike) -> None:
        lines = self.get_lines()
        content = '\n'.join(lines)
        with Path(fpath).open('wb') as fd:
            fd.write(content)
